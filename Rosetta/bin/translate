#!/usr/bin/env python
################################################################################
import StringIO, os, argparse, sys
sys.path.append('{}/../../'.format(os.path.dirname(__file__)))
from Rosetta import implemented_bases
from Rosetta.internal import SLHA
from Rosetta.internal.basis import write_param_card
from Rosetta import session, settings
################################################################################
existing = implemented_bases.keys()
allowed_flav = ('general', 'diagonal', 'universal')
################################################################################
parser = argparse.ArgumentParser(
                  description=(
                  "Read in an SLHA format parameter card in a particular basis "
                  "and write a new card in another implemented basis."
                  )
        )
parser.add_argument("param_card", metavar="PARAMCARD",  
                     type=str, help="Input parameter card.")
                     
parser.add_argument("-o", "--output", metavar="OUTPUT", type=str, default='',
                    help="Output file name. Default: [PARAMCARD]_new")
                    
parser.add_argument("-t", "--target", type=str, default='bsmc', 
                    choices=existing,
                    help="Basis into which to translate, default: bsmc")
                          
parser.add_argument("-w", "--overwrite", action='store_true', 
                    help="Overwrite any pre-existing output file.")

parser.add_argument("-d", "--dependent", action='store_true', 
                    help=("Also write out dependent parameters to output card"))
                    
parser.add_argument("-s", "--silent", action='store_true', 
                    help=("Suppress all warnings and take default answers to " 
                          "all questions."))
parser.add_argument("-v", "--verbose", action='store_true', 
                    help=("Activate verbose setting for program output."))
                    
parser.add_argument("--force", action='store_true', 
                    help=("Take default answers to all questions."))
                    
parser.add_argument("-f", "--flavor", type=str, default = "general", 
                    choices=allowed_flav,
                    help=("Specify flavor structure, default : 'general'"))
                          
parser.add_argument("-e", "--ehdecay", action='store_true', 
                    help="Interface with eHDECAY for Higgs branching fractions.")
################################################################################
args = parser.parse_args()
settings.silent = args.silent
settings.verbose = args.verbose
settings.force = args.force

session.log('')
session.once('########## Rosetta ##########')
# Read basis class from paramerter card, 
# must be defined in Rosetta.implemented_bases
session.log('Reading "{}"\n'.format(args.param_card))
thecard = SLHA.read(args.param_card)
if 'basis' not in thecard.blocks:
    raise RosettaError('\n    Parameter card {} '.format(args.param_card) + 
                       'does not have a block "BASIS".')
else:
    try:
        basis = thecard.blocks['basis'][1]
    except KeyError:
        raise RosettaError('\n    Formatting error for block basis. '
                               'Check input card, {}.'.format(args.param_card))
try:
    mybasis = implemented_bases[basis.lower()] 
except KeyError:
    err = ('\n    Element 1 of block "BASIS", "{}", not recognised. '.format(basis)
           + 'Rosetta accepts one of: {}.'.format(', '.join(bases.keys())))
    raise RosettaError(err)

if not args.output: # output file name
    if '.' in args.param_card:
        new_name = args.param_card.split('.')
        new_name.insert(-1,'_new.')
        new_param_card = ''.join(new_name)
    else:
        new_name = args.param_card+'_new'
else:
    new_param_card = args.output

session.log('Basis class used to read in param card:\n    {}\n'.format(mybasis))

# if args.flavor not in ('general','diagonal','universal','MFV'):

session.log('flavor structure: {}\n'.format(args.flavor))
# create instance of mybasis, atuomatically translating to target basis
basis_instance = mybasis(param_card=args.param_card, 
                         output_basis=args.target,
                         ehdecay=args.ehdecay,
                         flavor=args.flavor)

if not args.dependent and args.target.lower()!='bsmc':
    basis_instance.newbasis.delete_dependent()

if write_param_card(basis_instance.newcard, new_param_card, 
                    overwrite=args.overwrite): # 
    session.log('#############################')
    session.log('')
    session.exit(0)
else:
    session.log('#############################')
    session.log('')
    session.exit(0)
################################################################################


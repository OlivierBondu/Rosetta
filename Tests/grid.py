#!/usr/bin/env python
from __future__ import division
import tempfile
import os
import sys
import re
import random
import time

sys.path.append('../')

from Rosetta import HISZ as HZ
from Rosetta.internal.basis import checkers as check
from Rosetta.internal import settings, session

target = 'warsaw'
# target = 'higgs'
# target = 'bsmc'

for line in open('sample.txt','r'):
    keys = line.split()[1:]
    break

instance = HZ.HISZ(flavor='universal')
instance['Lam'] = 1000.
settings.silent = True
check.sminputs(instance, instance.required_inputs)
check.masses(instance, instance.required_masses)

relevant = {i:k for i,k in enumerate(keys) if k in instance}
others = [(i,k) for i,k in enumerate(keys) if i not in relevant]

thefile = open('sample.txt','r')

newkeys = []

start = time.time()
lines = iter(thefile)
npts = 0
for line in lines:
    while line.startswith('#'): line = lines.next()
        
    values = [float(x) for x in line.split()]
    
    for i,k in relevant.iteritems():
        instance[k] = values[i]
        
    instance.set_flavor('universal','general')
    
    trans = instance.translate(target=target, cache=False, minimal=True)

    # Set new keys for translated basis based on first translation based on all 
    # non-zero coefficients generated by the translation. (NOT FOOLPROOF)
    if not newkeys:
        for k,v in trans.iteritems():
            if v!=0.:
                newkeys.append(k)
    
        print ' '.join(['#']+newkeys + [x[1] for x in others])

    newvalues = ([trans[k] for k in newkeys] 
                + [values[x[0]] for x in others])
    
    fmt = ('{:.5e} '*len(newvalues)).format
    print fmt(*newvalues)
    
    instance.set_flavor('general','universal')
    
    npts += 1
    
thefile.close()

total = time.time() - start
print '# Grid took {:.1f} seconds ({:.3f}s per point).'.format(total, total/npts)

session.exit()


